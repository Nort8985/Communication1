// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Firebase
import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
import { getDatabase, ref, push, onValue, remove, set, onDisconnect, serverTimestamp, get, query, orderByChild, limitToLast } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-database.js';

const firebaseConfig = {
    apiKey: "AIzaSyCjByS41_k-zgRoSWwBs5hrp8zZSTThxwI",
    authDomain: "comments-4f6ef.firebaseapp.com",
    databaseURL: "https://comments-4f6ef-default-rtdb.europe-west1.firebasedatabase.app",
    projectId: "comments-4f6ef",
    storageBucket: "comments-4f6ef.firebasestorage.app",
    messagingSenderId: "423558993625",
    appId: "1:423558993625:web:48bc7b387855f7788710c8",
    measurementId: "G-CYKP3568TT"
};

// –ü—Ä–∞–≤–∏–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
const databaseRules = {
    rules: {
        ".read": true,
        ".write": true,
        "posts": {
            ".indexOn": ["timestamp", "author"]
        },
        "comments": {
            ".indexOn": ["postId", "timestamp"]
        },
        "users": {
            ".indexOn": ["lastSeen"]
        },
        "online": {
            ".indexOn": ["timestamp"]
        },
        "chats": {
            ".indexOn": ["participants", "lastMessage", "timestamp"]
        },
        "messages": {
            ".indexOn": ["chatId", "timestamp"]
        }
    }
};

const app = initializeApp(firebaseConfig);
const database = getDatabase(app);
const postsRef = ref(database, 'posts');
const commentsRef = ref(database, 'comments');
const chatsRef = ref(database, 'chats');
const messagesRef = ref(database, 'messages');

// ============ –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ============
let userFingerprint = null;
let userStatus = { banned: false, muted: false };
let fingerprintReady = false;
let currentSort = 'new';
let allPosts = [];
let filteredPosts = []; // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
let currentAdminTab = 'dashboard';
let notifications = [];
let notificationTimeout = null;
let currentUser = null; // –¢–µ–∫—É—â–µ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

// ============ –§–ò–õ–¨–¢–†–´ ============
let currentFilters = {
    author: '',
    timeRange: 'all',
    minRating: 0
};

// ============ –ß–ê–¢–´ ============
let currentChatId = null;
let allChats = [];
let chatMessages = {};
let chatListeners = []; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —á–∞—Ç–æ–≤
let unreadMessages = {}; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

// ============ FINGERPRINT ============
async function initFingerprint() {
    try {
        const FingerprintJS = await window.FingerprintJS.load();
        const result = await FingerprintJS.get();
        userFingerprint = result.visitorId;
        console.log('üîë Fingerprint:', userFingerprint);

        startRealtimeStatusMonitoring();
        await recordUserActivity();

        fingerprintReady = true;
        console.log('‚úÖ Fingerprint –≥–æ—Ç–æ–≤');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Fingerprint:', error);
        userFingerprint = 'temp_' + Math.random().toString(36).substr(2, 16);
        fingerprintReady = true;
    }
}

// ============ –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–¢–ê–¢–£–°–ê ============
function startRealtimeStatusMonitoring() {
    if (!userFingerprint) return;

    const banRef = ref(database, `bans/${userFingerprint}`);
    onValue(banRef, (snapshot) => {
        if (snapshot.exists()) {
            const banData = snapshot.val();
            if (banData.expiresAt && banData.expiresAt < Date.now()) {
                remove(banRef);
                userStatus.banned = false;
            } else {
                userStatus.banned = true;
                showBanAlert(banData);
            }
        } else {
            userStatus.banned = false;
        }
    });

    const muteRef = ref(database, `mutes/${userFingerprint}`);
    onValue(muteRef, (snapshot) => {
        if (snapshot.exists()) {
            const muteData = snapshot.val();
            if (muteData.expiresAt && muteData.expiresAt < Date.now()) {
                remove(muteRef);
                userStatus.muted = false;
            } else {
                userStatus.muted = true;
            }
        } else {
            userStatus.muted = false;
        }
    });
}

function showBanAlert(banData) {
    alert(`üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã!\n\n–ü—Ä–∏—á–∏–Ω–∞: ${banData.reason}\n–ò—Å—Ç–µ–∫–∞–µ—Ç: ${banData.expiresAt ? new Date(banData.expiresAt).toLocaleString('ru-RU') : '–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π'}`);
}

async function recordUserActivity() {
    if (!userFingerprint) return;

    const username = document.getElementById('username')?.value.trim() || '–ê–Ω–æ–Ω–∏–º';
    const activityRef = ref(database, `users/${userFingerprint}`);

    try {
        await set(activityRef, {
            fingerprint: userFingerprint,
            lastUsername: username,
            lastSeen: serverTimestamp(),
            userAgent: navigator.userAgent.substring(0, 200)
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', error);
    }
}

// ============ –û–ù–õ–ê–ô–ù ============
const userId = 'user_' + Math.random().toString(36).substr(2, 9);
const userStatusOnlineRef = ref(database, `online/${userId}`);

async function initOnlineStatus() {
    try {
        await set(userStatusOnlineRef, {
            online: true,
            timestamp: serverTimestamp(),
            fingerprint: userFingerprint || 'loading',
            username: document.getElementById('username')?.value.trim() || '–ê–Ω–æ–Ω–∏–º'
        });
        onDisconnect(userStatusOnlineRef).remove();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞:', error);
    }
}

const onlineRef = ref(database, 'online');
onValue(onlineRef, (snapshot) => {
    const count = snapshot.numChildren();
    const onlineEl = document.getElementById('online-count');
    if (onlineEl) onlineEl.textContent = count;

    const sidebarCount = document.getElementById('online-count-sidebar');
    if (sidebarCount) sidebarCount.textContent = count;

    const onlineMobile = document.getElementById('online-count-mobile');
    if (onlineMobile) onlineMobile.textContent = count;

    const badgeOnline = document.getElementById('badge-online');
    if (badgeOnline) badgeOnline.textContent = count;

    const statOnline = document.getElementById('stat-online');
    if (statOnline) statOnline.textContent = count;
});

// ============ –ú–û–ë–ò–õ–¨–ù–û–ï –ú–ï–ù–Æ ============
window.toggleMobileMenu = function () {
    const sidebar = document.getElementById('mobile-sidebar');
    const overlay = document.querySelector('.mobile-overlay');

    if (sidebar && overlay) {
        sidebar.classList.toggle('show');
        overlay.classList.toggle('show');

        // –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª body –∫–æ–≥–¥–∞ –º–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ
        if (sidebar.classList.contains('show')) {
            document.body.style.overflow = 'hidden';
        } else {
            document.body.style.overflow = '';
        }
    }
};

// ============ –¢–ï–ú–ù–ê–Ø –¢–ï–ú–ê ============
window.toggleTheme = function () {
    document.body.classList.toggle('dark-theme');
    const icon = document.getElementById('theme-icon');
    if (icon) {
        icon.className = document.body.classList.contains('dark-theme') ? 'fas fa-sun' : 'fas fa-moon';
    }
    localStorage.setItem('theme', document.body.classList.contains('dark-theme') ? 'dark' : 'light');
};

if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark-theme');
    const themeIcon = document.getElementById('theme-icon');
    if (themeIcon) themeIcon.className = 'fas fa-sun';
}

// ============ –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê ============
function isAdmin() {
    const username = document.getElementById('username')?.value.trim();
    return username === 'Nort89855';
}

function updateAdminUI() {
    const admin = isAdmin();
    const adminSidebar = document.getElementById('admin-sidebar');
    const adminSidebarMobile = document.getElementById('admin-sidebar-mobile');

    if (adminSidebar) {
        adminSidebar.style.display = admin ? 'block' : 'none';
    }

    if (adminSidebarMobile) {
        adminSidebarMobile.style.display = admin ? 'block' : 'none';
    }

    if (allPosts.length > 0) {
        sortAndDisplayPosts();
    }
}

// ============ –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ============
window.openPostModal = function () {
    const username = document.getElementById('username')?.value.trim();
    if (!username) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }

    if (userStatus.banned) {
        alert('‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã!');
        return;
    }

    if (userStatus.muted) {
        alert('‚ùå –í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã!');
        return;
    }

    document.getElementById('post-modal').classList.add('show');
};

window.closePostModal = function () {
    document.getElementById('post-modal').classList.remove('show');
    document.getElementById('post-title').value = '';
    document.getElementById('post-text').value = '';
};

window.closeEditPostModal = function () {
    document.getElementById('edit-post-modal').classList.remove('show');
    document.getElementById('edit-post-title').value = '';
    document.getElementById('edit-post-text').value = '';
};

window.openAdminPanel = function () {
    if (!isAdmin()) {
        alert('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!');
        return;
    }

    document.getElementById('admin-modal').classList.add('show');
    switchAdminTab('dashboard');
};

window.closeAdminPanel = function () {
    document.getElementById('admin-modal').classList.remove('show');
};

// ============ –§–£–ù–ö–¶–ò–ò –ß–ê–¢–û–í ============
window.toggleChats = function () {
    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    const username = document.getElementById('username')?.value.trim();
    if (!username) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }

    document.getElementById('chats-modal').classList.add('show');
    loadUserChats();
};

window.closeChatsModal = function () {
    document.getElementById('chats-modal').classList.remove('show');
    currentChatId = null;

    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —á–∞—Ç–æ–≤ –∏ fallback –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
    chatListeners.forEach(unsubscribe => {
        if (typeof unsubscribe === 'function') {
            try {
                unsubscribe();
            } catch (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª—É—à–∞—Ç–µ–ª—è:', error);
            }
        }
    });
    chatListeners = [];

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    unreadMessages = {};

    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —á–∞—Ç–æ–≤ –∑–∞–∫—Ä—ã—Ç–æ, –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –æ—á–∏—â–µ–Ω—ã');
};

window.openNewChatModal = function () {
    document.getElementById('new-chat-modal').classList.add('show');
};

window.closeNewChatModal = function () {
    document.getElementById('new-chat-modal').classList.remove('show');
    document.getElementById('chat-participant').value = '';
};

// –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤
window.refreshChats = function () {
    console.log('üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤');
    const refreshBtn = document.querySelector('.refresh-chats-btn i');
    if (refreshBtn) {
        refreshBtn.style.animation = 'spin 1s linear';
        setTimeout(() => {
            refreshBtn.style.animation = '';
        }, 1000);
    }

    loadUserChats();
    if (currentChatId) {
        loadChatMessages(currentChatId);
    }

    showInfoNotification('–ß–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 2000);
};

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function loadUserChats() {
    const username = document.getElementById('username')?.value.trim();
    if (!username) return;

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
    chatListeners.forEach(unsubscribe => {
        if (typeof unsubscribe === 'function') {
            try {
                unsubscribe();
            } catch (error) {
                console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª—É—à–∞—Ç–µ–ª—è:', error);
            }
        }
    });
    chatListeners = [];

    console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', username);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const unsubscribeChats = onValue(chatsRef, (snapshot) => {
        console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        const chatsList = document.getElementById('chats-list');
        if (!chatsList) return;

        chatsList.innerHTML = '';

        if (!snapshot.exists()) {
            chatsList.innerHTML = '<div class="no-chats"><i class="fas fa-comments"></i><h4>–ù–µ—Ç —á–∞—Ç–æ–≤</h4><p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —á–∞—Ç</p></div>';
            return;
        }

        allChats = [];
        snapshot.forEach(child => {
            const chat = child.val();
            if (chat.participants && chat.participants.includes(username)) {
                allChats.push({
                    id: child.key,
                    data: chat
                });
            }
        });

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Ç—ã –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        allChats.sort((a, b) => (b.data.lastMessage || 0) - (a.data.lastMessage || 0));

        allChats.forEach(chat => {
            const unreadCount = unreadMessages[chat.id] || 0;
            const chatItem = createChatItem(chat.id, chat.data, username, unreadCount);
            chatsList.appendChild(chatItem);
        });
    }, (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —á–∞—Ç–æ–≤:', error);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    chatListeners.push(unsubscribeChats);

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö)
    const unsubscribeAllMessages = onValue(messagesRef, (snapshot) => {
        console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
        const currentUsername = document.getElementById('username')?.value.trim();
        if (!currentUsername) return;

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
        const newUnreadMessages = {};

        if (snapshot.exists()) {
            snapshot.forEach(child => {
                const message = child.val();
                const chat = allChats.find(c => c.id === message.chatId);

                if (chat && chat.data.participants.includes(currentUsername) && message.author !== currentUsername) {
                    // –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å –≤ –æ–¥–Ω–æ–º –∏–∑ –Ω–∞—à–∏—Ö —á–∞—Ç–æ–≤
                    if (message.chatId !== currentChatId) {
                        // –ß–∞—Ç –Ω–µ –æ—Ç–∫—Ä—ã—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
                        newUnreadMessages[message.chatId] = (newUnreadMessages[message.chatId] || 0) + 1;

                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                        if (message.timestamp > (Date.now() - 5000)) { // –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—Ç–∞—Ä—à–µ 5 —Å–µ–∫—É–Ω–¥
                            showInfoNotification(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${escapeHtml(message.author)}`, 3000);
                        }
                    }
                }
            });
        }

        unreadMessages = newUnreadMessages;
    }, (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    chatListeners.push(unsubscribeAllMessages);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
    setTimeout(() => {
        if (chatListeners.length === 0) {
            console.warn('‚ö†Ô∏è –°–ª—É—à–∞—Ç–µ–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...');
            loadUserChats();
        }
    }, 2000);

    // –î–æ–±–∞–≤–ª—è–µ–º fallback –º–µ—Ö–∞–Ω–∏–∑–º –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ realtime –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    let lastChatUpdate = Date.now();
    let lastMessageUpdate = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (fallback)
    const chatFallbackInterval = setInterval(async () => {
        if (document.getElementById('chats-modal')?.classList.contains('show')) {
            try {
                const snapshot = await get(chatsRef);
                if (snapshot.exists()) {
                    const currentTime = Date.now();
                    let hasNewData = false;

                    snapshot.forEach(child => {
                        const chat = child.val();
                        if (chat.lastMessage && chat.lastMessage > lastChatUpdate) {
                            hasNewData = true;
                        }
                    });

                    if (hasNewData) {
                        console.log('üîÑ Fallback: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤');
                        lastChatUpdate = currentTime;
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç—ã
                        loadUserChats();
                    }
                }
            } catch (error) {
                console.warn('Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Ç–æ–≤ –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
            }
        }
    }, 10000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (fallback)
    const messageFallbackInterval = setInterval(async () => {
        if (currentChatId && document.getElementById('chats-modal')?.classList.contains('show')) {
            try {
                const snapshot = await get(messagesRef);
                if (snapshot.exists()) {
                    const currentTime = Date.now();
                    let hasNewMessages = false;

                    snapshot.forEach(child => {
                        const message = child.val();
                        if (message.chatId === currentChatId && message.timestamp > lastMessageUpdate) {
                            hasNewMessages = true;
                        }
                    });

                    if (hasNewMessages) {
                        console.log('üîÑ Fallback: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
                        lastMessageUpdate = currentTime;
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                        loadChatMessages(currentChatId);
                    }
                }
            } catch (error) {
                console.warn('Fallback –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
            }
        }
    }, 5000);

    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const clearFallbacks = () => {
        clearInterval(chatFallbackInterval);
        clearInterval(messageFallbackInterval);
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ fallback'–æ–≤
    chatListeners.push(clearFallbacks);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ
function createChatItem(chatId, chatData, currentUsername, unreadCount = 0) {
    const div = document.createElement('div');
    div.className = `chat-item ${currentChatId === chatId ? 'active' : ''}`;
    div.onclick = () => openChat(chatId);

    const otherParticipant = chatData.participants.find(p => p !== currentUsername) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';
    const lastMessageTime = chatData.lastMessage ? getTimeAgo(new Date(chatData.lastMessage)) : '';

    div.innerHTML = `
        <div class="chat-avatar">
            <i class="fas fa-user-circle"></i>
            ${unreadCount > 0 ? `<span class="unread-badge">${unreadCount > 99 ? '99+' : unreadCount}</span>` : ''}
        </div>
        <div class="chat-info">
            <div class="chat-name">${escapeHtml(otherParticipant)}</div>
            <div class="chat-last-message">${chatData.lastMessageText ? escapeHtml(chatData.lastMessageText.substring(0, 30)) + (chatData.lastMessageText.length > 30 ? '...' : '') : '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
        </div>
        <div class="chat-time">${lastMessageTime}</div>
    `;

    return div;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
window.createNewChat = async function () {
    const participant = document.getElementById('chat-participant')?.value.trim();
    const currentUsername = document.getElementById('username')?.value.trim();

    if (!participant) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
        return;
    }

    if (participant === currentUsername) {
        alert('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å —Å–∞–º–∏–º —Å–æ–±–æ–π!');
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —á–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const existingChat = allChats.find(chat =>
        chat.data.participants.includes(participant) &&
        chat.data.participants.includes(currentUsername)
    );

    if (existingChat) {
        alert('–ß–∞—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!');
        closeNewChatModal();
        openChat(existingChat.id);
        return;
    }

    try {
        const newChat = {
            participants: [currentUsername, participant],
            createdBy: currentUsername,
            timestamp: Date.now(),
            lastMessage: null,
            lastMessageText: null
        };

        await push(chatsRef, newChat);
        console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω!');
        closeNewChatModal();
        // –ß–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Å–ª—É—à–∞—Ç–µ–ª—é onValue
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// ============ –°–û–ó–î–ê–ù–ò–ï –ü–û–°–¢–ê ============
window.submitPost = async function () {
    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    const username = document.getElementById('username')?.value.trim();
    const title = document.getElementById('post-title')?.value.trim();
    const text = document.getElementById('post-text')?.value.trim();

    if (!username) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }

    if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞!');
        return;
    }

    const newPost = {
        author: username,
        title: title,
        text: text || '',
        timestamp: Date.now(),
        upvotes: 0,
        downvotes: 0,
        commentCount: 0, // –°—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        fingerprint: userFingerprint,
        userAgent: navigator.userAgent.substring(0, 200)
    };

    try {
        await push(postsRef, newPost);
        console.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω!');
        closePostModal();
        await recordUserActivity();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// ============ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–°–¢–ê ============
let editingPostId = null;

window.editPost = async function (postId) {
    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    if (userStatus.banned) {
        alert('‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã!');
        return;
    }

    if (userStatus.muted) {
        alert('‚ùå –í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã!');
        return;
    }

    try {
        const postRef = ref(database, `posts/${postId}`);
        const snapshot = await get(postRef);
        const postData = snapshot.val();

        if (!postData) {
            alert('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –ø–æ—Å—Ç–∞
        if (postData.author !== currentUser) {
            alert('‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã!');
            return;
        }

        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('edit-post-title').value = postData.title;
        document.getElementById('edit-post-text').value = postData.text || '';
        editingPostId = postId;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.getElementById('edit-post-modal').classList.add('show');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

window.updatePost = async function () {
    if (!editingPostId) return;

    const title = document.getElementById('edit-post-title')?.value.trim();
    const text = document.getElementById('edit-post-text')?.value.trim();

    if (!title) {
        alert('–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞!');
        return;
    }

    try {
        const postRef = ref(database, `posts/${editingPostId}`);
        const snapshot = await get(postRef);
        const postData = snapshot.val();

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç
        await set(postRef, {
            ...postData,
            title: title,
            text: text || '',
            edited: true,
            editedAt: Date.now()
        });

        console.log('‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!');
        closeEditPostModal();
        showSuccessNotification('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 3000);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// ============ –£–î–ê–õ–ï–ù–ò–ï –ü–û–°–¢–ê –î–õ–Ø –ê–í–¢–û–†–ê ============
window.deletePost = async function (id) {
    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    try {
        const postRef = ref(database, `posts/${id}`);
        const snapshot = await get(postRef);
        const postData = snapshot.val();

        if (!postData) {
            alert('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        const isAdminUser = isAdmin();
        const isAuthor = currentUser && postData.author === currentUser;

        if (!isAdminUser && !isAuthor) {
            alert('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞!');
            return;
        }

        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            return;
        }

        await remove(postRef);
        console.log('üóëÔ∏è –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω');

        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É
        const commentsSnapshot = await get(commentsRef);
        if (commentsSnapshot.exists()) {
            const deletePromises = [];
            commentsSnapshot.forEach(child => {
                const comment = child.val();
                if (comment.postId === id) {
                    deletePromises.push(remove(ref(database, `comments/${child.key}`)));
                }
            });
            await Promise.all(deletePromises);
            console.log('üóëÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç—É —É–¥–∞–ª–µ–Ω—ã');
        }

        showSuccessNotification('–ü–æ—Å—Ç –∏ –≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –Ω–µ–º—É —É–¥–∞–ª–µ–Ω—ã!', 3000);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// ============ –†–ï–ê–õ–¨–ù–û-–í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–û–°–¢–û–í ============
onValue(postsRef, (snapshot) => {
    console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');

    const postsContainer = document.getElementById('posts-container');
    if (!postsContainer) return;

    allPosts = [];

    if (!snapshot.exists()) {
        postsContainer.innerHTML = '<div style="text-align: center; padding: 40px; color: var(--text-secondary);">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π! üéâ</div>';
        updateStats(0, 0);
        return;
    }

    let totalLikes = 0;
    snapshot.forEach((childSnapshot) => {
        const postData = childSnapshot.val();
        allPosts.push({
            id: childSnapshot.key,
            data: postData
        });
        totalLikes += (postData.upvotes || 0);
    });

    updateStats(allPosts.length, totalLikes);
    sortAndDisplayPosts();
});

function updateStats(postsCount, likesCount) {
    const postsCountEl = document.getElementById('posts-count');
    if (postsCountEl) postsCountEl.textContent = postsCount;

    const postsCountMobile = document.getElementById('posts-count-mobile');
    if (postsCountMobile) postsCountMobile.textContent = postsCount;

    const statPosts = document.getElementById('stat-posts');
    if (statPosts) statPosts.textContent = postsCount;

    const statLikes = document.getElementById('stat-likes');
    if (statLikes) statLikes.textContent = likesCount;
}

// ============ –†–ï–ê–õ–¨–ù–û-–í–†–ï–ú–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ============
onValue(ref(database, 'users'), (snapshot) => {
    console.log('üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    const count = snapshot.exists() ? snapshot.size : 0;
    const usersCountEl = document.getElementById('users-count');
    if (usersCountEl) usersCountEl.textContent = count;

    const usersCountMobile = document.getElementById('users-count-mobile');
    if (usersCountMobile) usersCountMobile.textContent = count;

    const statUsers = document.getElementById('stat-users');
    if (statUsers) statUsers.textContent = count;
});

// ============ –°–û–†–¢–ò–†–û–í–ö–ê –ü–û–°–¢–û–í ============
window.sortPosts = function (type) {
    currentSort = type;

    document.querySelectorAll('.sort-btn').forEach(btn => btn.classList.remove('active'));
    if (event && event.target) {
        event.target.classList.add('active');
    }

    sortAndDisplayPosts();
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤
function sortAndDisplayPosts() {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏–ª–∏ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
    let postsToSort = filteredPosts.length > 0 ? [...filteredPosts] : [...allPosts];

    if (currentSort === 'new') {
        postsToSort.sort((a, b) => b.data.timestamp - a.data.timestamp);
    } else if (currentSort === 'hot') {
        postsToSort.sort((a, b) => {
            const scoreA = (a.data.upvotes || 0) - (a.data.downvotes || 0);
            const scoreB = (b.data.upvotes || 0) - (b.data.downvotes || 0);
            const timeA = Date.now() - a.data.timestamp;
            const timeB = Date.now() - b.data.timestamp;
            // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º "–≥–æ—Ä—è—á–∏—Ö" –ø–æ—Å—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏
            const hotScoreA = scoreA / Math.pow(timeA + 1, 1.5);
            const hotScoreB = scoreB / Math.pow(timeB + 1, 1.5);
            return hotScoreB - hotScoreA;
        });
    } else if (currentSort === 'top') {
        postsToSort.sort((a, b) => {
            const scoreA = (a.data.upvotes || 0) - (a.data.downvotes || 0);
            const scoreB = (b.data.upvotes || 0) - (b.data.downvotes || 0);
            // –ï—Å–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥–∏ —Ä–∞–≤–Ω—ã, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            if (scoreB === scoreA) {
                return b.data.timestamp - a.data.timestamp;
            }
            return scoreB - scoreA;
        });
    } else if (currentSort === 'comments') {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        postsToSort.sort((a, b) => {
            const commentsA = a.data.commentCount || 0;
            const commentsB = b.data.commentCount || 0;
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Ä–∞–≤–Ω–æ, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if (commentsB === commentsA) {
                return b.data.timestamp - a.data.timestamp;
            }
            return commentsB - commentsA;
        });
    }

    const postsContainer = document.getElementById('posts-container');
    postsContainer.innerHTML = '';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã
    if (filteredPosts.length > 0 || hasActiveFilters()) {
        const filterIndicator = createFilterIndicator();
        postsContainer.appendChild(filterIndicator);
    }

    if (postsToSort.length === 0) {
        postsContainer.innerHTML += '<div class="no-posts">–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</div>';
        return;
    }

    postsToSort.forEach(post => {
        const postCard = createPostCard(post.id, post.data);
        postsContainer.appendChild(postCard);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function createFilterIndicator() {
    const div = document.createElement('div');
    div.className = 'filter-indicator';

    const activeFilters = [];
    if (currentFilters.author) activeFilters.push(`–ê–≤—Ç–æ—Ä: ${currentFilters.author}`);
    if (currentFilters.timeRange !== 'all') activeFilters.push(`–ü–µ—Ä–∏–æ–¥: ${getTimeRangeLabel(currentFilters.timeRange)}`);
    if (currentFilters.minRating > 0) activeFilters.push(`–†–µ–π—Ç–∏–Ω–≥ –æ—Ç: ${currentFilters.minRating}`);

    div.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between; background: var(--accent); color: white; padding: 12px 20px; border-radius: var(--radius-lg); margin-bottom: 20px;">
            <div style="display: flex; align-items: center; gap: 12px;">
                <i class="fas fa-filter"></i>
                <span>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: ${activeFilters.join(', ')}</span>
            </div>
            <button onclick="clearFilters()" style="background: rgba(255,255,255,0.2); border: none; color: white; padding: 6px 12px; border-radius: var(--radius-md); cursor: pointer;">
                <i class="fas fa-times"></i> –û—á–∏—Å—Ç–∏—Ç—å
            </button>
        </div>
    `;

    return div;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
function hasActiveFilters() {
    return currentFilters.author || currentFilters.timeRange !== 'all' || currentFilters.minRating > 0;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
function getTimeRangeLabel(range) {
    const labels = {
        today: '–°–µ–≥–æ–¥–Ω—è',
        week: '–ù–µ–¥–µ–ª—è',
        month: '–ú–µ—Å—è—Ü'
    };
    return labels[range] || range;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞
function getCommentCountForPost(postId) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    return parseInt(document.getElementById(`comment-count-${postId}`)?.textContent) || 0;
}

// ============ –§–£–ù–ö–¶–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ü–û–°–¢–û–í ============
// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
window.applyFilters = function () {
    const authorFilter = document.getElementById('author-filter')?.value.trim().toLowerCase() || '';
    const timeFilter = document.getElementById('time-filter')?.value || 'all';
    const ratingFilter = parseInt(document.getElementById('rating-filter')?.value) || 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    currentFilters = {
        author: authorFilter,
        timeRange: timeFilter,
        minRating: ratingFilter
    };

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∫ –ø–æ—Å—Ç–∞–º
    filteredPosts = allPosts.filter(post => {
        const postData = post.data;

        // –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤—Ç–æ—Ä—É
        if (authorFilter && !postData.author.toLowerCase().includes(authorFilter)) {
            return false;
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–µ—Ä–∏–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏
        if (timeFilter !== 'all') {
            const postTime = new Date(postData.timestamp);
            const now = new Date();
            let timeLimit;

            switch (timeFilter) {
                case 'today':
                    timeLimit = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    break;
                case 'week':
                    timeLimit = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                    break;
                case 'month':
                    timeLimit = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
                    break;
            }

            if (postTime < timeLimit) {
                return false;
            }
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–µ–π—Ç–∏–Ω–≥—É
        if (ratingFilter > 0) {
            const score = (postData.upvotes || 0) - (postData.downvotes || 0);
            if (score < ratingFilter) {
                return false;
            }
        }

        return true;
    });

    console.log(`üîç –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã. –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${filteredPosts.length} –∏–∑ ${allPosts.length}`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if (filteredPosts.length === 0) {
        showInfoNotification('–ü–æ—Å—Ç—ã –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    } else if (filteredPosts.length < allPosts.length) {
        showSuccessNotification(`–ù–∞–π–¥–µ–Ω–æ ${filteredPosts.length} –ø–æ—Å—Ç–æ–≤ –∏–∑ ${allPosts.length}`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    sortAndDisplayPosts();
};

// –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
window.clearFilters = function () {
    // –û—á–∏—â–∞–µ–º –ø–æ–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    const authorFilter = document.getElementById('author-filter');
    const timeFilter = document.getElementById('time-filter');
    const ratingFilter = document.getElementById('rating-filter');

    if (authorFilter) authorFilter.value = '';
    if (timeFilter) timeFilter.value = 'all';
    if (ratingFilter) ratingFilter.value = '';

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    currentFilters = {
        author: '',
        timeRange: 'all',
        minRating: 0
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
    filteredPosts = [];

    console.log('üîÑ –§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤
    sortAndDisplayPosts();

    showInfoNotification('–§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
};

// ============ –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –ü–û–°–¢–ê ============
function createPostCard(id, data) {
    const div = document.createElement('div');
    div.className = 'post-card';

    const score = (data.upvotes || 0) - (data.downvotes || 0);
    const userVotes = JSON.parse(localStorage.getItem('userVotes') || '{}');
    const userVote = userVotes[id] || 0;

    const date = new Date(data.timestamp);
    const timeAgo = getTimeAgo(date);

    const admin = isAdmin();

    div.innerHTML = `
        <div class="vote-section">
            <button class="vote-btn ${userVote === 1 ? 'upvoted' : ''}" onclick="vote('${id}', 1)">
                <i class="fas fa-arrow-up"></i>
            </button>
            <div class="vote-count ${score > 0 ? 'positive' : score < 0 ? 'negative' : ''}">${formatNumber(score)}</div>
            <button class="vote-btn ${userVote === -1 ? 'downvoted' : ''}" onclick="vote('${id}', -1)">
                <i class="fas fa-arrow-down"></i>
            </button>
        </div>
        <div class="post-content">
            <div class="post-header">
                <span class="post-author">${escapeHtml(data.author)}</span>
                ${data.author === 'Nort89855' ? '<span class="admin-badge">ADMIN</span>' : ''}
                <span>‚Ä¢</span>
                <span class="post-time">${timeAgo}</span>
            </div>
            <div class="post-title">${escapeHtml(data.title)}</div>
            ${data.text ? `<div class="post-body">${escapeHtml(data.text)}</div>` : ''}
            <div class="post-actions">
                <button class="action-btn comment" onclick="toggleComments('${id}')">
                    <i class="fas fa-comments"></i> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (<span id="comment-count-${id}">0</span>)
                </button>
                ${admin && data.fingerprint ? `
                    <button class="action-btn ban" onclick="banUser('${data.fingerprint}', '${escapeHtml(data.author)}')">
                        <i class="fas fa-ban"></i> –ë–∞–Ω
                    </button>
                    <button class="action-btn mute" onclick="muteUser('${data.fingerprint}', '${escapeHtml(data.author)}')">
                        <i class="fas fa-volume-mute"></i> –ú—É—Ç
                    </button>
                ` : ''}
                ${admin ? `
                    <button class="action-btn delete" onclick="deletePost('${id}')">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                    </button>
                ` : ''}
                ${!admin && currentUser && data.author === currentUser ? `
                    <button class="action-btn edit" onclick="editPost('${id}')">
                        <i class="fas fa-edit"></i> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="action-btn delete" onclick="deletePost('${id}')">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                    </button>
                ` : ''}
            </div>

            <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ -->
            <div class="comments-section" id="comments-${id}" style="display: none;">
                <div class="comments-header">
                    <h4><i class="fas fa-comments"></i> –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</h4>
                </div>
                <div class="comments-container" id="comments-container-${id}">
                    <!-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å -->
                </div>
                <div class="comment-form">
                    <input type="text" id="comment-text-${id}" placeholder="–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." class="comment-input">
                    <button class="comment-submit-btn" onclick="submitComment('${id}')">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    `;

    return div;
}

// ============ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–õ–û–°–û–í–ê–ù–ò–Ø –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú ============
window.vote = async function (postId, voteType) {
    if (userStatus.banned) {
        alert('‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }

    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    const userVotes = JSON.parse(localStorage.getItem('userVotes') || '{}');
    const currentVote = userVotes[postId] || 0;

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    const voteBtn = document.querySelector(`[onclick="vote('${postId}', 1)"]`)?.parentElement?.parentElement;
    if (voteBtn) {
        const upvoteBtn = voteBtn.querySelector('.vote-btn:nth-child(1)');
        const downvoteBtn = voteBtn.querySelector('.vote-btn:nth-child(3)');
        const voteCount = voteBtn.querySelector('.vote-count');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        const previousUpvoted = upvoteBtn?.classList.contains('upvoted');
        const previousDownvoted = downvoteBtn?.classList.contains('downvoted');
        const previousCount = voteCount?.textContent;

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (currentVote === voteType) {
            // –£–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å
            upvoteBtn?.classList.remove('upvoted');
            downvoteBtn?.classList.remove('downvoted');
            userVotes[postId] = 0;
        } else {
            // –î–æ–±–∞–≤–ª—è–µ–º/–º–µ–Ω—è–µ–º –≥–æ–ª–æ—Å
            if (voteType === 1) {
                upvoteBtn?.classList.add('upvoted');
                downvoteBtn?.classList.remove('downvoted');
            } else {
                downvoteBtn?.classList.add('downvoted');
                upvoteBtn?.classList.remove('upvoted');
            }
            userVotes[postId] = voteType;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫
        updateVoteCountLocally(postId, voteType, currentVote);
    }

    try {
        const postRef = ref(database, `posts/${postId}`);
        const snapshot = await get(postRef);
        const postData = snapshot.val();

        if (!postData) {
            throw new Error('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        let upvotes = postData.upvotes || 0;
        let downvotes = postData.downvotes || 0;

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (currentVote === 1) upvotes--;
        if (currentVote === -1) downvotes--;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (currentVote === voteType) {
            // –£–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å - —É–∂–µ –æ—Ç–∫–∞—Ç–∏–ª–∏ –≤—ã—à–µ
        } else {
            if (voteType === 1) upvotes++;
            if (voteType === -1) downvotes++;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ —Å timestamp –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        const voteData = {
            vote: userVotes[postId],
            timestamp: Date.now(),
            fingerprint: userFingerprint
        };
        localStorage.setItem('userVotes', JSON.stringify(userVotes));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ
        const voteDetails = JSON.parse(localStorage.getItem('voteDetails') || '{}');
        voteDetails[postId] = voteData;
        localStorage.setItem('voteDetails', JSON.stringify(voteDetails));

        await set(postRef, {
            ...postData,
            upvotes: upvotes,
            downvotes: downvotes,
            lastVote: Date.now()
        });

        console.log('‚úÖ –ì–æ–ª–æ—Å —É—á—Ç–µ–Ω:', { postId, voteType, upvotes, downvotes });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:', error);

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (voteBtn) {
            const upvoteBtn = voteBtn.querySelector('.vote-btn:nth-child(1)');
            const downvoteBtn = voteBtn.querySelector('.vote-btn:nth-child(3)');
            const voteCount = voteBtn.querySelector('.vote-count');

            upvoteBtn?.classList.toggle('upvoted', previousUpvoted);
            downvoteBtn?.classList.toggle('downvoted', previousDownvoted);
            if (voteCount && previousCount) {
                voteCount.textContent = previousCount;
            }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–ª–æ—Å –≤ localStorage
        if (currentVote === voteType) {
            userVotes[postId] = 0;
        } else {
            userVotes[postId] = currentVote;
        }
        localStorage.setItem('userVotes', JSON.stringify(userVotes));

        showErrorNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 3000);
    }
};

// –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤
function updateVoteCountLocally(postId, newVote, oldVote) {
    const voteElements = document.querySelectorAll(`[onclick*="vote('${postId}'"]`);
    voteElements.forEach(element => {
        const voteSection = element.closest('.vote-section');
        if (voteSection) {
            const voteCount = voteSection.querySelector('.vote-count');
            if (voteCount) {
                const currentCount = parseInt(voteCount.textContent.replace(/[^\d-]/g, '')) || 0;

                let newCount = currentCount;
                if (oldVote === 1) newCount++;
                if (oldVote === -1) newCount--;
                if (newVote === 1) newCount--;
                if (newVote === -1) newCount++;

                voteCount.textContent = formatNumber(newCount);
            }
        }
    });
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
function syncVotesOnLoad() {
    const voteDetails = JSON.parse(localStorage.getItem('voteDetails') || '{}');
    const currentTime = Date.now();
    const syncPromises = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç
    Object.keys(voteDetails).forEach(postId => {
        const voteData = voteDetails[postId];
        if (currentTime - voteData.timestamp > 5 * 60 * 1000) { // 5 –º–∏–Ω—É—Ç
            // –ü–µ—Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ–ª–æ—Å–∞
            syncPromises.push(syncSingleVote(postId, voteData));
        }
    });

    if (syncPromises.length > 0) {
        console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${syncPromises.length} –≥–æ–ª–æ—Å–æ–≤...`);
        Promise.all(syncPromises).then(() => {
            console.log('‚úÖ –ì–æ–ª–æ—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }).catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤:', error);
        });
    }
}

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
async function syncSingleVote(postId, voteData) {
    try {
        const postRef = ref(database, `posts/${postId}`);
        const snapshot = await get(postRef);
        const postData = snapshot.val();

        if (postData) {
            await set(postRef, {
                ...postData,
                lastVote: Date.now()
            });
        }
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ –¥–ª—è –ø–æ—Å—Ç–∞ ${postId}:`, error);
    }
}


// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ù–ê–í–ò–ì–ê–¶–ò–Ø ============
window.switchAdminTab = function (tabName) {
    currentAdminTab = tabName;

    document.querySelectorAll('.admin-tab-pane').forEach(pane => {
        pane.classList.remove('active');
    });

    document.querySelectorAll('.admin-nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    const selectedPane = document.getElementById(`admin-tab-${tabName}`);
    if (selectedPane) selectedPane.classList.add('active');

    if (event && event.target) {
        let btn = event.target;
        if (!btn.classList.contains('admin-nav-btn')) {
            btn = btn.closest('.admin-nav-btn');
        }
        if (btn) btn.classList.add('active');
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
    if (tabName === 'dashboard') loadDashboard();
    if (tabName === 'online') loadOnlineUsers();
    if (tabName === 'users') loadAllUsers();
    if (tabName === 'bans') loadBans();
    if (tabName === 'mutes') loadMutes();
    if (tabName === 'posts') loadAllPosts();
};

// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –î–ê–®–ë–û–†–î ============
function loadDashboard() {
    loadStatistics();
    loadRecentActivity();
}

async function loadStatistics() {
    console.log('üì° –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');

    // ============ –†–ï–ê–õ–¨–ù–û-–í–†–ï–ú–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–ê–ù–û–í ============
    onValue(ref(database, 'bans'), (snapshot) => {
        const bansCount = snapshot.exists() ? snapshot.size : 0;

        const statBans = document.getElementById('stat-bans');
        if (statBans) statBans.textContent = bansCount;

        const badgeBans = document.getElementById('badge-bans');
        if (badgeBans) badgeBans.textContent = bansCount;
    });

    // ============ –†–ï–ê–õ–¨–ù–û-–í–†–ï–ú–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–£–¢–û–í ============
    onValue(ref(database, 'mutes'), (snapshot) => {
        const mutesCount = snapshot.exists() ? snapshot.size : 0;

        const statMutes = document.getElementById('stat-mutes');
        if (statMutes) statMutes.textContent = mutesCount;

        const badgeMutes = document.getElementById('badge-mutes');
        if (badgeMutes) badgeMutes.textContent = mutesCount;
    });
}

async function loadRecentActivity() {
    const activityContainer = document.getElementById('recent-activity');
    if (!activityContainer) return;

    activityContainer.innerHTML = '';

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    const postsSnapshot = await get(query(postsRef, orderByChild('timestamp'), limitToLast(5)));

    if (!postsSnapshot.exists()) {
        activityContainer.innerHTML = '<div class="empty-state"><p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p></div>';
        return;
    }

    const posts = [];
    postsSnapshot.forEach(child => {
        posts.push({ id: child.key, data: child.val() });
    });

    posts.reverse().forEach(post => {
        const item = document.createElement('div');
        item.className = 'activity-item';
        item.innerHTML = `
            <strong>${escapeHtml(post.data.author)}</strong> —Å–æ–∑–¥–∞–ª –ø–æ—Å—Ç: "${escapeHtml(post.data.title)}"
            <div class="activity-time">${getTimeAgo(new Date(post.data.timestamp))}</div>
        `;
        activityContainer.appendChild(item);
    });
}

// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –û–ù–õ–ê–ô–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ============
window.refreshOnlineUsers = function () {
    loadOnlineUsers();
};

function loadOnlineUsers() {
    onValue(onlineRef, (snapshot) => {
        const container = document.getElementById('online-users-list');
        if (!container) return;

        container.innerHTML = '';

        if (!snapshot.exists()) {
            container.innerHTML = '<div class="empty-state"><i class="fas fa-users"></i><h4>–ù–µ—Ç –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4><p>–í—Å–µ –æ—Ñ–ª–∞–π–Ω</p></div>';
            return;
        }

        snapshot.forEach(child => {
            const user = child.val();
            const item = document.createElement('div');
            item.className = 'admin-item';
            item.innerHTML = `
                <div class="admin-item-header">
                    <div class="admin-item-title">
                        <span class="online-indicator">
                            <i class="fas fa-circle"></i> ONLINE
                        </span>
                        ${escapeHtml(user.username || '–ê–Ω–æ–Ω–∏–º')}
                    </div>
                </div>
                <div class="admin-item-info">
                    <strong>Fingerprint:</strong> ${user.fingerprint ? user.fingerprint.substring(0, 20) + '...' : 'N/A'}
                </div>
            `;
            container.appendChild(item);
        });
    }, { onlyOnce: true });
}

// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ============
function loadAllUsers() {
    onValue(ref(database, 'users'), async (usersSnapshot) => {
        const container = document.getElementById('all-users-list');
        if (!container) return;

        container.innerHTML = '';

        if (!usersSnapshot.exists()) {
            container.innerHTML = '<div class="empty-state"><i class="fas fa-user-friends"></i><h4>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4></div>';
            return;
        }

        const bansSnapshot = await get(ref(database, 'bans'));
        const mutesSnapshot = await get(ref(database, 'mutes'));

        const bansMap = {};
        const mutesMap = {};

        bansSnapshot.forEach(child => { bansMap[child.key] = child.val(); });
        mutesSnapshot.forEach(child => { mutesMap[child.key] = child.val(); });

        usersSnapshot.forEach(child => {
            const user = child.val();
            const userId = child.key;
            const isBanned = bansMap[userId];
            const isMuted = mutesMap[userId];

            const item = document.createElement('div');
            item.className = 'admin-item';
            item.innerHTML = `
                <div class="admin-item-header">
                    <div class="admin-item-title">
                        ${escapeHtml(user.lastUsername || '–ê–Ω–æ–Ω–∏–º')}
                        ${user.lastUsername === 'Nort89855' ? '<span class="status-badge admin">ADMIN</span>' : ''}
                        ${isBanned ? '<span class="status-badge banned">BANNED</span>' : ''}
                        ${isMuted ? '<span class="status-badge muted">MUTED</span>' : ''}
                    </div>
                </div>
                <div class="admin-item-info">
                    <strong>ID:</strong> ${userId.substring(0, 30)}...<br>
                    <strong>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</strong> –ù–µ–¥–∞–≤–Ω–æ
                </div>
                <div class="admin-item-actions">
                    ${!isBanned ? `
                        <button style="background: #F44336;" onclick="banUserById('${userId}', '${escapeHtml(user.lastUsername)}')">
                            <i class="fas fa-ban"></i> –ó–∞–±–∞–Ω–∏—Ç—å
                        </button>
                    ` : `
                        <button style="background: #4CAF50;" onclick="unbanUser('${userId}')">
                            <i class="fas fa-check"></i> –†–∞–∑–±–∞–Ω–∏—Ç—å
                        </button>
                    `}
                    ${!isMuted ? `
                        <button style="background: #FF9800;" onclick="muteUserById('${userId}', '${escapeHtml(user.lastUsername)}')">
                            <i class="fas fa-volume-mute"></i> –ó–∞–º—É—Ç–∏—Ç—å
                        </button>
                    ` : `
                        <button style="background: #2196F3;" onclick="unmuteUser('${userId}')">
                            <i class="fas fa-volume-up"></i> –†–∞–∑–º—É—Ç–∏—Ç—å
                        </button>
                    `}
                    <button style="background: #757575;" onclick="deleteAllUserPosts('${userId}')">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã
                    </button>
                </div>
            `;
            container.appendChild(item);
        });
    }, { onlyOnce: true });
}

// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ë–ê–ù–´ ============
function loadBans() {
    onValue(ref(database, 'bans'), (snapshot) => {
        const container = document.getElementById('bans-list');
        if (!container) return;

        container.innerHTML = '';

        if (!snapshot.exists()) {
            container.innerHTML = '<div class="empty-state"><i class="fas fa-ban"></i><h4>–ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4><p>–í—Å–µ —á–∏—Å—Ç—ã!</p></div>';
            return;
        }

        snapshot.forEach(child => {
            const ban = child.val();
            const isExpired = ban.expiresAt && ban.expiresAt < Date.now();

            const item = document.createElement('div');
            item.className = 'admin-item';
            item.innerHTML = `
                <div class="admin-item-header">
                    <div class="admin-item-title">
                        ${escapeHtml(ban.username || '–ê–Ω–æ–Ω–∏–º')}
                        ${isExpired ? '<span class="status-badge expired">–ò–°–¢–Å–ö</span>' : '<span class="status-badge banned">–ê–ö–¢–ò–í–ï–ù</span>'}
                    </div>
                    <div class="admin-item-time">${new Date(ban.timestamp).toLocaleString('ru-RU')}</div>
                </div>
                <div class="admin-item-info">
                    <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${escapeHtml(ban.reason)}<br>
                    <strong>–ó–∞–±–∞–Ω–∏–ª:</strong> ${escapeHtml(ban.bannedBy)}<br>
                    <strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> ${ban.expiresAt ? new Date(ban.expiresAt).toLocaleString('ru-RU') : '–ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π'}
                </div>
                <div class="admin-item-actions">
                    <button style="background: #4CAF50;" onclick="unbanUser('${child.key}')">
                        <i class="fas fa-check"></i> –°–Ω—è—Ç—å –±–∞–Ω
                    </button>
                </div>
            `;
            container.appendChild(item);
        });
    }, { onlyOnce: true });
}

window.clearExpiredBans = async function () {
    const snapshot = await get(ref(database, 'bans'));
    let cleared = 0;

    const promises = [];
    snapshot.forEach(child => {
        const ban = child.val();
        if (ban.expiresAt && ban.expiresAt < Date.now()) {
            promises.push(remove(ref(database, `bans/${child.key}`)));
            cleared++;
        }
    });

    await Promise.all(promises);
    alert(`‚úÖ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –±–∞–Ω–æ–≤: ${cleared}`);
    loadBans();
};

// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –ú–£–¢–´ ============
function loadMutes() {
    onValue(ref(database, 'mutes'), (snapshot) => {
        const container = document.getElementById('mutes-list');
        if (!container) return;

        container.innerHTML = '';

        if (!snapshot.exists()) {
            container.innerHTML = '<div class="empty-state"><i class="fas fa-volume-mute"></i><h4>–ù–µ—Ç –∑–∞–º—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h4><p>–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–∫–∞–∑–∞–Ω</p></div>';
            return;
        }

        snapshot.forEach(child => {
            const mute = child.val();
            const isExpired = mute.expiresAt < Date.now();

            const item = document.createElement('div');
            item.className = 'admin-item';
            item.innerHTML = `
                <div class="admin-item-header">
                    <div class="admin-item-title">
                        ${escapeHtml(mute.username || '–ê–Ω–æ–Ω–∏–º')}
                        ${isExpired ? '<span class="status-badge expired">–ò–°–¢–Å–ö</span>' : '<span class="status-badge muted">–ê–ö–¢–ò–í–ï–ù</span>'}
                    </div>
                    <div class="admin-item-time">${new Date(mute.timestamp).toLocaleString('ru-RU')}</div>
                </div>
                <div class="admin-item-info">
                    <strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${escapeHtml(mute.reason)}<br>
                    <strong>–ó–∞–º—É—Ç–∏–ª:</strong> ${escapeHtml(mute.mutedBy)}<br>
                    <strong>–ò—Å—Ç–µ–∫–∞–µ—Ç:</strong> ${new Date(mute.expiresAt).toLocaleString('ru-RU')}
                </div>
                <div class="admin-item-actions">
                    <button style="background: #2196F3;" onclick="unmuteUser('${child.key}')">
                        <i class="fas fa-volume-up"></i> –°–Ω—è—Ç—å –º—É—Ç
                    </button>
                </div>
            `;
            container.appendChild(item);
        });
    }, { onlyOnce: true });
}

window.clearExpiredMutes = async function () {
    const snapshot = await get(ref(database, 'mutes'));
    let cleared = 0;

    const promises = [];
    snapshot.forEach(child => {
        const mute = child.val();
        if (mute.expiresAt < Date.now()) {
            promises.push(remove(ref(database, `mutes/${child.key}`)));
            cleared++;
        }
    });

    await Promise.all(promises);
    alert(`‚úÖ –û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –º—É—Ç–æ–≤: ${cleared}`);
    loadMutes();
};

// ============ –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ - –í–°–ï –ü–û–°–¢–´ ============
function loadAllPosts() {
    onValue(postsRef, (snapshot) => {
        const container = document.getElementById('all-posts-list');
        if (!container) return;

        container.innerHTML = '';

        if (!snapshot.exists()) {
            container.innerHTML = '<div class="empty-state"><i class="fas fa-list"></i><h4>–ù–µ—Ç –ø–æ—Å—Ç–æ–≤</h4></div>';
            return;
        }

        const posts = [];
        snapshot.forEach(child => {
            posts.push({ id: child.key, data: child.val() });
        });

        posts.sort((a, b) => b.data.timestamp - a.data.timestamp);

        posts.forEach(post => {
            const score = (post.data.upvotes || 0) - (post.data.downvotes || 0);

            const item = document.createElement('div');
            item.className = 'admin-item';
            item.innerHTML = `
                <div class="admin-item-header">
                    <div class="admin-item-title">
                        ${escapeHtml(post.data.title)}
                    </div>
                    <div class="admin-item-time">${getTimeAgo(new Date(post.data.timestamp))}</div>
                </div>
                <div class="admin-item-info">
                    <strong>–ê–≤—Ç–æ—Ä:</strong> ${escapeHtml(post.data.author)}<br>
                    <strong>–†–µ–π—Ç–∏–Ω–≥:</strong> ${score > 0 ? '+' : ''}${score} (üëç ${post.data.upvotes || 0} / üëé ${post.data.downvotes || 0})
                    ${post.data.text ? `<br><strong>–¢–µ–∫—Å—Ç:</strong> ${escapeHtml(post.data.text).substring(0, 100)}...` : ''}
                </div>
                <div class="admin-item-actions">
                    <button style="background: #F44336;" onclick="deletePost('${post.id}')">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
                    </button>
                </div>
            `;
            container.appendChild(item);
        });
    }, { onlyOnce: true });
}

// ============ –§–£–ù–ö–¶–ò–ò –ú–û–î–ï–†–ê–¶–ò–ò ============
window.banUser = async function (fingerprint, username) {
    const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞:', '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª');
    if (!reason) return;

    const duration = prompt('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç, 0 = –Ω–∞–≤—Å–µ–≥–¥–∞):', '0');
    const durationMs = parseInt(duration) * 60 * 1000;

    try {
        await set(ref(database, `bans/${fingerprint}`), {
            fingerprint, username, reason,
            timestamp: Date.now(),
            expiresAt: durationMs > 0 ? Date.now() + durationMs : null,
            bannedBy: 'Nort89855'
        });
        alert(`‚úÖ ${username} –∑–∞–±–∞–Ω–µ–Ω!`);
        loadStatistics();
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// –û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞
function openChat(chatId) {
    currentChatId = chatId;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ
    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.remove('active');
    });
    event?.target?.closest('.chat-item')?.classList.add('active');

    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ª—É—à–∞—Ç–µ–ª—å —á–∞—Ç–æ–≤)
    if (chatListeners.length > 1) {
        for (let i = chatListeners.length - 1; i >= 1; i--) {
            if (typeof chatListeners[i] === 'function') {
                try {
                    chatListeners[i]();
                } catch (error) {
                    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                }
            }
            chatListeners.splice(i, 1);
        }
    }

    loadChatMessages(chatId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
function loadChatMessages(chatId) {
    const chatWindow = document.getElementById('chat-window');
    if (!chatWindow) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    chatWindow.innerHTML = '<div class="chat-loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>';

    const chat = allChats.find(c => c.id === chatId);
    if (!chat) return;

    const currentUsername = document.getElementById('username')?.value.trim();
    const otherParticipant = chat.data.participants.find(p => p !== currentUsername) || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π';

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞
    chatWindow.innerHTML = `
        <div class="chat-header">
            <div class="chat-participant">
                <i class="fas fa-user-circle"></i>
                <span>${escapeHtml(otherParticipant)}</span>
            </div>
            <button class="close-chat-btn" onclick="closeCurrentChat()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="chat-messages" id="chat-messages-${chatId}">
            <div class="no-messages"><i class="fas fa-comments"></i><p>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä!</p></div>
        </div>
        <div class="chat-input">
            <input type="text" id="message-input-${chatId}" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." class="message-input">
            <button class="send-message-btn" onclick="sendMessage('${chatId}')">
                <i class="fas fa-paper-plane"></i>
            </button>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const messageInput = document.getElementById(`message-input-${chatId}`);
    if (messageInput) {
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendMessage(chatId);
            }
        });
        messageInput.focus();
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    const chatMessagesQuery = query(messagesRef, orderByChild('chatId'));
    const unsubscribeMessages = onValue(chatMessagesQuery, (snapshot) => {
        console.log(`üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ ${chatId} –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`);
        const messagesContainer = document.getElementById(`chat-messages-${chatId}`);
        if (!messagesContainer) return;

        const messages = [];

        if (snapshot.exists()) {
            snapshot.forEach(child => {
                const message = child.val();
                if (message.chatId === chatId) {
                    messages.push({
                        id: child.key,
                        data: message
                    });
                }
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        messages.sort((a, b) => a.data.timestamp - b.data.timestamp);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if (messages.length === 0) {
            messagesContainer.innerHTML = '<div class="no-messages"><i class="fas fa-comments"></i><p>–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä!</p></div>';
        } else {
            messagesContainer.innerHTML = messages.map(msg => createMessageElement(msg.id, msg.data, currentUsername)).join('');
        }

        // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        unreadMessages[chatId] = 0;

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }, (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ ${chatId}:`, error);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    chatListeners.push(unsubscribeMessages);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
function createMessageElement(messageId, messageData, currentUsername) {
    const isOwn = messageData.author === currentUsername;
    const time = getTimeAgo(new Date(messageData.timestamp));

    return `
        <div class="message ${isOwn ? 'own' : 'other'}">
            <div class="message-content">
                <div class="message-text">${escapeHtml(messageData.text)}</div>
                <div class="message-time">${time}</div>
                <button class="copy-message-btn" onclick="copyMessage('${messageId}', '${escapeHtml(messageData.text)}')" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ">
                    <i class="fas fa-copy"></i>
                </button>
            </div>
        </div>
    `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
window.sendMessage = async function (chatId) {
    const messageInput = document.getElementById(`message-input-${chatId}`);
    const text = messageInput?.value.trim();

    if (!text) return;

    const currentUsername = document.getElementById('username')?.value.trim();
    if (!currentUsername) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }

    if (userStatus.banned) {
        alert('‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!');
        return;
    }

    if (userStatus.muted) {
        alert('‚ùå –í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!');
        return;
    }

    try {
        const newMessage = {
            chatId: chatId,
            author: currentUsername,
            text: text,
            timestamp: Date.now(),
            fingerprint: userFingerprint,
            userAgent: navigator.userAgent.substring(0, 200)
        };

        await push(messagesRef, newMessage);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        await set(ref(database, `chats/${chatId}`), {
            ...allChats.find(c => c.id === chatId).data,
            lastMessage: Date.now(),
            lastMessageText: text
        });

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        messageInput.value = '';

        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Ç –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
        setTimeout(() => {
            if (currentChatId === chatId) {
                loadChatMessages(chatId);
            }
        }, 500);

        await recordUserActivity();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
window.closeCurrentChat = function () {
    currentChatId = null;
    document.querySelectorAll('.chat-item').forEach(item => {
        item.classList.remove('active');
    });

    const chatWindow = document.getElementById('chat-window');
    if (chatWindow) {
        chatWindow.innerHTML = `
            <div class="chat-placeholder">
                <i class="fas fa-comments"></i>
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç</h3>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π</p>
            </div>
        `;
    }
};

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
window.copyMessage = async function (messageId, text) {
    try {
        // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–∫—Å—Ç
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = text;
        const plainText = tempDiv.textContent || tempDiv.innerText || text;

        // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Clipboard API
        if (navigator.clipboard && window.isSecureContext) {
            await navigator.clipboard.writeText(plainText);
        } else {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = plainText;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();

            try {
                document.execCommand('copy');
            } catch (err) {
                console.error('Fallback: –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', err);
                showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 3000);
                return;
            } finally {
                document.body.removeChild(textArea);
            }
        }

        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const copyBtn = document.querySelector(`[onclick*="copyMessage('${messageId}'"]`);
        if (copyBtn) {
            const originalIcon = copyBtn.innerHTML;
            copyBtn.innerHTML = '<i class="fas fa-check"></i>';
            copyBtn.style.color = 'var(--success)';

            setTimeout(() => {
                copyBtn.innerHTML = originalIcon;
                copyBtn.style.color = '';
            }, 1000);
        }

        showSuccessNotification('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!', 2000);
        console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ:', plainText);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        showErrorNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', 3000);
    }
};

window.banUserById = window.banUser;

window.unbanUser = async function (fingerprint) {
    if (confirm('–°–Ω—è—Ç—å –±–∞–Ω —Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        try {
            await remove(ref(database, `bans/${fingerprint}`));
            alert('‚úÖ –ë–∞–Ω —Å–Ω—è—Ç!');
            loadStatistics();
            if (currentAdminTab === 'bans') loadBans();
            if (currentAdminTab === 'users') loadAllUsers();
        } catch (error) {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
};

window.muteUser = async function (fingerprint, username) {
    const reason = prompt('–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞:', '–°–ø–∞–º');
    if (!reason) return;

    const duration = prompt('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç):', '60');
    const durationMs = parseInt(duration) * 60 * 1000;

    try {
        await set(ref(database, `mutes/${fingerprint}`), {
            fingerprint, username, reason,
            timestamp: Date.now(),
            expiresAt: Date.now() + durationMs,
            mutedBy: 'Nort89855'
        });
        alert(`‚úÖ ${username} –∑–∞–º—É—á–µ–Ω –Ω–∞ ${duration} –º–∏–Ω!`);
        loadStatistics();
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

window.muteUserById = window.muteUser;

window.unmuteUser = async function (fingerprint) {
    if (confirm('–°–Ω—è—Ç—å –º—É—Ç —Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) {
        try {
            await remove(ref(database, `mutes/${fingerprint}`));
            alert('‚úÖ –ú—É—Ç —Å–Ω—è—Ç!');
            loadStatistics();
            if (currentAdminTab === 'mutes') loadMutes();
            if (currentAdminTab === 'users') loadAllUsers();
        } catch (error) {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
        }
    }
};

window.deleteAllUserPosts = async function (fingerprint) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')) return;

    try {
        const snapshot = await get(postsRef);
        let deleted = 0;

        const promises = [];
        snapshot.forEach(child => {
            if (child.val().fingerprint === fingerprint) {
                promises.push(remove(ref(database, `posts/${child.key}`)));
                deleted++;
            }
        });

        await Promise.all(promises);
        alert(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: ${deleted}`);
    } catch (error) {
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// ============ –£–¢–ò–õ–ò–¢–´ ============
function escapeHtml(text) {
    if (!text) return '';
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function getTimeAgo(date) {
    const seconds = Math.floor((new Date() - date) / 1000);

    if (seconds < 60) return `${seconds}—Å –Ω–∞–∑–∞–¥`;
    if (seconds < 3600) return `${Math.floor(seconds / 60)}–º –Ω–∞–∑–∞–¥`;
    if (seconds < 86400) return `${Math.floor(seconds / 3600)}—á –Ω–∞–∑–∞–¥`;
    return `${Math.floor(seconds / 86400)}–¥ –Ω–∞–∑–∞–¥`;
}

function formatNumber(num) {
    if (num >= 1000000) return (num / 1000000).toFixed(1) + 'M';
    if (num >= 1000) return (num / 1000).toFixed(1) + 'K';
    return num.toString();
}

// ============ –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –ù–ò–ö–ê ============
function saveUsername(username) {
    if (username && username.trim()) {
        localStorage.setItem('savedUsername', username.trim());
    }
}

function loadUsername() {
    return localStorage.getItem('savedUsername') || '';
}

function clearUsername() {
    localStorage.removeItem('savedUsername');
}

// ============ –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–ß–ò–°–¢–ö–ò –ù–ò–ö–ê ============
window.clearSavedUsername = function () {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–∏–∫? –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ —Å–∞–π—Ç–∞ –ø–æ–ª–µ –∏–º–µ–Ω–∏ –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º.')) {
        clearUsername();
        const usernameInput = document.getElementById('username');
        if (usernameInput) {
            usernameInput.value = '';
            usernameInput.focus();
        }
        alert('‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–∏–∫ –æ—á–∏—â–µ–Ω!');
    }
};

// ============ –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ============
// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
window.toggleNotifications = function () {
    const notifications = document.getElementById('notifications');
    if (notifications) {
        notifications.classList.toggle('show');
    }
};

// –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –Ω–∞—á–∞–ª—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.scrollToTop = function () {
    window.scrollTo({
        top: 0,
        behavior: 'smooth'
    });
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
window.handleSearch = function (event) {
    if (event.key === 'Enter') {
        const query = event.target.value.trim();
        if (query) {
            performSearch(query);
        }
    }
};

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
function performSearch(query) {
    console.log('üîç –ü–æ–∏—Å–∫:', query);

    if (!query || query.length < 2) {
        showInfoNotification('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
        return;
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
    const filteredPosts = allPosts.filter(post => {
        const title = post.data.title.toLowerCase();
        const text = (post.data.text || '').toLowerCase();
        const author = post.data.author.toLowerCase();
        const searchQuery = query.toLowerCase();

        return title.includes(searchQuery) ||
            text.includes(searchQuery) ||
            author.includes(searchQuery);
    });

    if (filteredPosts.length === 0) {
        showInfoNotification(`–ü–æ—Å—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
        return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    displaySearchResults(filteredPosts, query);
    showSuccessNotification(`–ù–∞–π–¥–µ–Ω–æ ${filteredPosts.length} –ø–æ—Å—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}"`);
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
function displaySearchResults(posts, query) {
    const postsContainer = document.getElementById('posts-container');
    if (!postsContainer) return;

    const originalPosts = [...allPosts];
    allPosts = posts;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–∏—Å–∫–∞
    const searchIndicator = document.createElement('div');
    searchIndicator.className = 'search-indicator';
    searchIndicator.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between; background: var(--primary); color: white; padding: 12px 20px; border-radius: var(--radius-lg); margin-bottom: 20px;">
            <div style="display: flex; align-items: center; gap: 12px;">
                <i class="fas fa-search"></i>
                <span>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${query}"</span>
            </div>
            <button onclick="clearSearch()" style="background: rgba(255,255,255,0.2); border: none; color: white; padding: 6px 12px; border-radius: var(--radius-md); cursor: pointer;">
                <i class="fas fa-times"></i> –û—á–∏—Å—Ç–∏—Ç—å
            </button>
        </div>
    `;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    postsContainer.setAttribute('data-original-content', postsContainer.innerHTML);
    postsContainer.setAttribute('data-search-query', query);

    postsContainer.innerHTML = '';
    postsContainer.appendChild(searchIndicator);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
    posts.forEach(post => {
        const postCard = createPostCard(post.id, post.data);
        postsContainer.appendChild(postCard);
    });
}

// –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
window.clearSearch = function () {
    const postsContainer = document.getElementById('posts-container');
    if (!postsContainer) return;

    const originalContent = postsContainer.getAttribute('data-original-content');
    if (originalContent) {
        postsContainer.innerHTML = originalContent;
        postsContainer.removeAttribute('data-original-content');
        postsContainer.removeAttribute('data-search-query');
        showInfoNotification('–ü–æ–∏—Å–∫ –æ—á–∏—â–µ–Ω');
    }
};

// –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function addNotification(type, title, message, duration = 5000) {
    const notificationId = 'notif_' + Date.now() + Math.random().toString(36).substr(2, 9);
    const notificationsContainer = document.getElementById('notifications');

    if (!notificationsContainer) return;

    const notification = document.createElement('div');
    notification.className = `notification ${type}`;
    notification.id = notificationId;
    notification.innerHTML = `
        <div class="notification-header">
            <div class="notification-icon">
                <i class="fas fa-${getNotificationIcon(type)}"></i>
            </div>
            <div class="notification-title">${escapeHtml(title)}</div>
        </div>
        <div class="notification-message">${escapeHtml(message)}</div>
        <div class="notification-time">${new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</div>
    `;

    notificationsContainer.appendChild(notification);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    setTimeout(() => {
        notification.classList.add('show');
    }, 100);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    updateNotificationBadge();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (duration > 0) {
        setTimeout(() => {
            hideNotification(notificationId);
        }, duration);
    }

    return notificationId;
}

// –°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function hideNotification(notificationId) {
    const notification = document.getElementById(notificationId);
    if (notification) {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
            updateNotificationBadge();
        }, 300);
    }
}

// –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function getNotificationIcon(type) {
    const icons = {
        success: 'check-circle',
        error: 'exclamation-circle',
        warning: 'exclamation-triangle',
        info: 'info-circle'
    };
    return icons[type] || 'info-circle';
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function updateNotificationBadge() {
    const badge = document.getElementById('notification-badge');
    const notifications = document.querySelectorAll('.notification');
    const count = notifications.length;

    if (badge) {
        badge.textContent = count;
        badge.style.display = count > 0 ? 'flex' : 'none';
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
function showSuccessNotification(message, duration) {
    return addNotification('success', '–£—Å–ø–µ—à–Ω–æ', message, duration);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
function showErrorNotification(message, duration = 7000) {
    return addNotification('error', '–û—à–∏–±–∫–∞', message, duration);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
function showWarningNotification(message, duration = 5000) {
    return addNotification('warning', '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', message, duration);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showInfoNotification(message, duration = 4000) {
    return addNotification('info', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', message, duration);
}

// ============ –°–ò–°–¢–ï–ú–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ============
// –ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
window.toggleComments = function (postId) {
    const commentsSection = document.getElementById(`comments-${postId}`);
    if (commentsSection) {
        const isVisible = commentsSection.style.display !== 'none';
        commentsSection.style.display = isVisible ? 'none' : 'block';

        if (!isVisible) {
            loadComments(postId);
        }
    }
};

// ============ –†–ï–ê–õ–¨–ù–û-–í–†–ï–ú–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ============
function loadComments(postId) {
    console.log(`üì° –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ ${postId}`);

    const commentsContainer = document.getElementById(`comments-container-${postId}`);
    if (!commentsContainer) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    commentsContainer.innerHTML = '<div class="comment-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...</div>';

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞
    const postCommentsRef = query(
        commentsRef,
        orderByChild('postId'),
    );

    onValue(postCommentsRef, (snapshot) => {
        console.log(`üì° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–æ—Å—Ç–∞ ${postId} –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏`);

        if (!snapshot.exists()) {
            commentsContainer.innerHTML = '<div class="no-comments">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>';
            updateCommentCount(postId, 0);
            return;
        }

        const comments = [];
        snapshot.forEach(child => {
            const comment = child.val();
            if (comment.postId === postId) {
                comments.push({
                    id: child.key,
                    data: comment
                });
            }
        });

        if (comments.length === 0) {
            commentsContainer.innerHTML = '<div class="no-comments">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</div>';
            updateCommentCount(postId, 0);
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        comments.sort((a, b) => a.data.timestamp - b.data.timestamp);

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        commentsContainer.innerHTML = '';
        comments.forEach(comment => {
            const commentElement = createCommentElement(comment.id, comment.data, postId);
            commentsContainer.appendChild(commentElement);
        });

        updateCommentCount(postId, comments.length);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
function createCommentElement(id, data, postId) {
    const div = document.createElement('div');
    div.className = 'comment-item';

    const date = new Date(data.timestamp);
    const timeAgo = getTimeAgo(date);
    const admin = isAdmin();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const userCommentVotes = JSON.parse(localStorage.getItem('userCommentVotes') || '{}');
    const userVote = userCommentVotes[id] || 0;
    const score = (data.upvotes || 0) - (data.downvotes || 0);

    div.innerHTML = `
        <div class="comment-vote-section">
            <button class="comment-vote-btn ${userVote === 1 ? 'upvoted' : ''}" onclick="voteComment('${id}', 1)">
                <i class="fas fa-arrow-up"></i>
            </button>
            <div class="comment-vote-count ${score > 0 ? 'positive' : score < 0 ? 'negative' : ''}">${formatNumber(score)}</div>
            <button class="comment-vote-btn ${userVote === -1 ? 'downvoted' : ''}" onclick="voteComment('${id}', -1)">
                <i class="fas fa-arrow-down"></i>
            </button>
        </div>
        <div class="comment-content">
            <div class="comment-header">
                <span class="comment-author">${escapeHtml(data.author)}</span>
                ${data.author === 'Nort89855' ? '<span class="admin-badge">ADMIN</span>' : ''}
                <span class="comment-time">${timeAgo}</span>
                ${admin ? `
                    <button class="comment-delete-btn" onclick="deleteComment('${id}', '${postId}')" title="–£–¥–∞–ª–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π">
                        <i class="fas fa-trash"></i>
                    </button>
                ` : ''}
            </div>
            <div class="comment-text">${escapeHtml(data.text)}</div>
        </div>
    `;

    return div;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
window.submitComment = async function (postId) {
    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    const username = document.getElementById('username')?.value.trim();
    const commentText = document.getElementById(`comment-text-${postId}`)?.value.trim();

    if (!username) {
        alert('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è!');
        return;
    }

    if (!commentText) {
        alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è!');
        return;
    }

    if (userStatus.banned) {
        alert('‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!');
        return;
    }

    if (userStatus.muted) {
        alert('‚ùå –í—ã –∑–∞–º—É—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å!');
        return;
    }

    const newComment = {
        postId: postId,
        author: username,
        text: commentText,
        timestamp: Date.now(),
        upvotes: 0,
        downvotes: 0,
        fingerprint: userFingerprint,
        userAgent: navigator.userAgent.substring(0, 200)
    };

    try {
        await push(commentsRef, newComment);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–µ
        await updatePostCommentCount(postId);

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const commentInput = document.getElementById(`comment-text-${postId}`);
        if (commentInput) {
            commentInput.value = '';
        }

        console.log('‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω!');
        await recordUserActivity();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
        alert('–û—à–∏–±–∫–∞: ' + error.message);
    }
};

// –£–ª—É—á—à–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
window.voteComment = async function (commentId, voteType) {
    if (userStatus.banned) {
        alert('‚ùå –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å!');
        return;
    }

    if (!fingerprintReady) {
        alert('‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É');
        return;
    }

    const userCommentVotes = JSON.parse(localStorage.getItem('userCommentVotes') || '{}');
    const currentVote = userCommentVotes[commentId] || 0;

    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    const commentVoteBtn = document.querySelector(`[onclick="voteComment('${commentId}', 1)"]`)?.parentElement?.parentElement;
    if (commentVoteBtn) {
        const upvoteBtn = commentVoteBtn.querySelector('.comment-vote-btn:nth-child(1)');
        const downvoteBtn = commentVoteBtn.querySelector('.comment-vote-btn:nth-child(3)');
        const voteCount = commentVoteBtn.querySelector('.comment-vote-count');

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const previousUpvoted = upvoteBtn?.classList.contains('upvoted');
        const previousDownvoted = downvoteBtn?.classList.contains('downvoted');
        const previousCount = voteCount?.textContent;

        // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if (currentVote === voteType) {
            upvoteBtn?.classList.remove('upvoted');
            downvoteBtn?.classList.remove('downvoted');
            userCommentVotes[commentId] = 0;
        } else {
            if (voteType === 1) {
                upvoteBtn?.classList.add('upvoted');
                downvoteBtn?.classList.remove('downvoted');
            } else {
                downvoteBtn?.classList.add('downvoted');
                upvoteBtn?.classList.remove('upvoted');
            }
            userCommentVotes[commentId] = voteType;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        updateCommentVoteCountLocally(commentId, voteType, currentVote);
    }

    try {
        const commentRef = ref(database, `comments/${commentId}`);
        const snapshot = await get(commentRef);
        const commentData = snapshot.val();

        if (!commentData) {
            throw new Error('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        let upvotes = commentData.upvotes || 0;
        let downvotes = commentData.downvotes || 0;

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if (currentVote === 1) upvotes--;
        if (currentVote === -1) downvotes--;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (currentVote === voteType) {
            // –£–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å - —É–∂–µ –æ—Ç–∫–∞—Ç–∏–ª–∏ –≤—ã—à–µ
        } else {
            if (voteType === 1) upvotes++;
            if (voteType === -1) downvotes++;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–∞ –ª–æ–∫–∞–ª—å–Ω–æ —Å timestamp
        const voteData = {
            vote: userCommentVotes[commentId],
            timestamp: Date.now(),
            fingerprint: userFingerprint
        };
        localStorage.setItem('userCommentVotes', JSON.stringify(userCommentVotes));

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–µ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const commentVoteDetails = JSON.parse(localStorage.getItem('commentVoteDetails') || '{}');
        commentVoteDetails[commentId] = voteData;
        localStorage.setItem('commentVoteDetails', JSON.stringify(commentVoteDetails));

        await set(commentRef, {
            ...commentData,
            upvotes: upvotes,
            downvotes: downvotes,
            lastVote: Date.now()
        });

        console.log('‚úÖ –ì–æ–ª–æ—Å –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á—Ç–µ–Ω:', { commentId, voteType, upvotes, downvotes });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', error);

        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (commentVoteBtn) {
            const upvoteBtn = commentVoteBtn.querySelector('.comment-vote-btn:nth-child(1)');
            const downvoteBtn = commentVoteBtn.querySelector('.comment-vote-btn:nth-child(3)');
            const voteCount = commentVoteBtn.querySelector('.comment-vote-count');

            upvoteBtn?.classList.toggle('upvoted', previousUpvoted);
            downvoteBtn?.classList.toggle('downvoted', previousDownvoted);
            if (voteCount && previousCount) {
                voteCount.textContent = previousCount;
            }
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥–æ–ª–æ—Å –≤ localStorage
        if (currentVote === voteType) {
            userCommentVotes[commentId] = 0;
        } else {
            userCommentVotes[commentId] = currentVote;
        }
        localStorage.setItem('userCommentVotes', JSON.stringify(userCommentVotes));

        showErrorNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 3000);
    }
};

// –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function updateCommentVoteCountLocally(commentId, newVote, oldVote) {
    const voteElements = document.querySelectorAll(`[onclick*="voteComment('${commentId}'"]`);
    voteElements.forEach(element => {
        const voteSection = element.closest('.comment-vote-section');
        if (voteSection) {
            const voteCount = voteSection.querySelector('.comment-vote-count');
            if (voteCount) {
                const currentCount = parseInt(voteCount.textContent.replace(/[^\d-]/g, '')) || 0;

                let newCount = currentCount;
                if (oldVote === 1) newCount++;
                if (oldVote === -1) newCount--;
                if (newVote === 1) newCount--;
                if (newVote === -1) newCount++;

                voteCount.textContent = formatNumber(newCount);
            }
        }
    });
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
window.deleteComment = function (commentId, postId) {
    if (!isAdmin()) {
        alert('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!');
        return;
    }

    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π?')) {
        remove(ref(database, 'comments/' + commentId))
            .then(() => {
                console.log('üóëÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–¥–∞–ª–µ–Ω');
                loadComments(postId); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            })
            .catch((error) => alert('–û—à–∏–±–∫–∞: ' + error.message));
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
function updateCommentCount(postId, count) {
    const countElement = document.getElementById(`comment-count-${postId}`);
    if (countElement) {
        countElement.textContent = count;
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –ø–æ—Å—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function updatePostCommentCount(postId) {
    try {
        const postRef = ref(database, `posts/${postId}`);
        const snapshot = await get(postRef);
        const postData = snapshot.val();

        if (postData) {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            const commentsSnapshot = await get(query(commentsRef, orderByChild('postId')));
            let commentCount = 0;

            if (commentsSnapshot.exists()) {
                commentsSnapshot.forEach(child => {
                    if (child.val().postId === postId) {
                        commentCount++;
                    }
                });
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –ø–æ—Å—Ç–µ
            await set(postRef, {
                ...postData,
                commentCount: commentCount
            });

            console.log(`‚úÖ –°—á–µ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ—Å—Ç–∞ ${postId}: ${commentCount}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:', error);
    }
}

// ============ –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö FIREBASE ============
async function checkFirebaseConnection() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Firebase
        const testRef = ref(database, '.info/connected');
        const connected = await new Promise((resolve) => {
            const timeout = setTimeout(() => resolve(false), 5000);
            const unsubscribe = onValue(testRef, (snapshot) => {
                clearTimeout(timeout);
                resolve(snapshot.val());
                unsubscribe();
            });
        });

        if (!connected) {
            throw new Error('–°–µ—Ä–≤–µ—Ä Firebase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase:', error);
        return false;
    }
}

// ============ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ============
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏...');
    console.log('üì± –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:', navigator.platform);
    console.log('üåê User Agent:', navigator.userAgent);
    console.log('üîó Online:', navigator.onLine);

    // –ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ —Ç–∞–π–º–∞—É—Ç–æ–º
    let retries = 3;
    let initialized = false;
    const initTimeout = 15000; // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    const initPromise = new Promise(async (resolve, reject) => {
        while (retries > 0 && !initialized) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
                const firebaseConnected = await checkFirebaseConnection();
                if (!firebaseConnected) {
                    throw new Error('–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Firebase');
                }

                await initFingerprint();
                await initOnlineStatus();

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                syncVotesOnLoad();
                initialized = true;
                console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
                resolve();
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${4 - retries}):`, error);
                retries--;

                if (retries > 0) {
                    await new Promise(resolve => setTimeout(resolve, 2000));
                } else {
                    reject(error);
                }
            }
        }
    });

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
    try {
        await Promise.race([
            initPromise,
            new Promise((_, reject) =>
                setTimeout(() => reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏')), initTimeout)
            )
        ]);
    } catch (error) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', error.message);
        showConnectionError();
        return;
    }

    if (!initialized) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫');
        showConnectionError();
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function showConnectionError() {
    const postsContainer = document.getElementById('posts-container');
    if (postsContainer) {
        postsContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary); max-width: 600px; margin: 0 auto;">
                <i class="fas fa-exclamation-triangle" style="font-size: 48px; opacity: 0.5; margin-bottom: 20px; color: #ff9800;"></i>
                <h3>–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º</h3>
                <p style="margin-bottom: 20px;">–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É DevTalk. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞.</p>

                <div style="background: var(--bg-secondary); padding: 20px; border-radius: var(--radius-lg); margin-bottom: 20px;">
                    <h4 style="margin-top: 0; color: var(--primary);">–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</h4>
                    <ul style="text-align: left; color: var(--text-secondary);">
                        <li>–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</li>
                        <li>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ Firebase –≤ –≤–∞—à–µ–π —Å–µ—Ç–∏ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ</li>
                        <li>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ä–≤–µ—Ä–∞</li>
                        <li>–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞</li>
                    </ul>
                </div>

                <div style="background: var(--accent); padding: 15px; border-radius: var(--radius-lg); margin-bottom: 20px;">
                    <h4 style="margin-top: 0; color: var(--primary);">–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</h4>
                    <ol style="text-align: left; color: var(--text-secondary);">
                        <li>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É</li>
                        <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN, –µ—Å–ª–∏ Firebase –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</li>
                        <li>–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞</li>
                        <li>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ persists</li>
                    </ol>
                </div>

                <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap;">
                    <button onclick="location.reload()" style="padding: 12px 24px; background: var(--reddit-blue); color: white; border: none; border-radius: 20px; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-redo"></i> –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                    <button onclick="checkConnection()" style="padding: 12px 24px; background: #666; color: white; border: none; border-radius: 20px; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-wifi"></i> –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤—è–∑—å
                    </button>
                    <button onclick="showOfflineMode()" style="padding: 12px 24px; background: var(--accent); color: white; border: none; border-radius: 20px; cursor: pointer; font-weight: 500;">
                        <i class="fas fa-plane"></i> –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º
                    </button>
                </div>
            </div>
        `;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
window.showOfflineMode = function () {
    const postsContainer = document.getElementById('posts-container');
    if (postsContainer) {
        postsContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <i class="fas fa-plane" style="font-size: 48px; opacity: 0.5; margin-bottom: 20px; color: var(--accent);"></i>
                <h3>–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º</h3>
                <p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.</p>
                <div style="margin-top: 20px;">
                    <button onclick="location.reload()" style="padding: 10px 20px; background: var(--reddit-blue); color: white; border: none; border-radius: 20px; cursor: pointer;">
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </div>
        `;
    }

    showInfoNotification('–ü–µ—Ä–µ—Ö–æ–¥ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ä–µ–∂–∏–º', 4000);
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
window.checkConnection = async function () {
    const postsContainer = document.getElementById('posts-container');
    if (!postsContainer) return;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏
    postsContainer.innerHTML = `
        <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
            <i class="fas fa-spinner fa-spin" style="font-size: 48px; margin-bottom: 20px;"></i>
            <h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...</h3>
        </div>
    `;

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
        const testRef = ref(database, '.info/connected');
        const connected = await new Promise((resolve) => {
            const unsubscribe = onValue(testRef, (snapshot) => {
                resolve(snapshot.val());
                unsubscribe();
            });
        });

        if (connected) {
            location.reload();
        } else {
            throw new Error('–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase');
        }
    } catch (error) {
        postsContainer.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <i class="fas fa-times-circle" style="font-size: 48px; opacity: 0.5; margin-bottom: 20px; color: #f44336;"></i>
                <h3>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</h3>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</p>
                <button onclick="checkConnection()" style="margin-top: 15px; padding: 10px 20px; background: var(--reddit-blue); color: white; border: none; border-radius: 20px; cursor: pointer;">
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
};

const usernameInput = document.getElementById('username');
if (usernameInput) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–∏–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    const savedUsername = loadUsername();
    if (savedUsername) {
        usernameInput.value = savedUsername;
        currentUser = savedUsername; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updateAdminUI();
        await recordUserActivity();

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        set(userStatusOnlineRef, {
            online: true,
            timestamp: serverTimestamp(),
            fingerprint: userFingerprint || 'loading',
            username: savedUsername
        });
    }

    usernameInput.addEventListener('input', () => {
        const username = usernameInput.value.trim();

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∏–∫ –ø—Ä–∏ –≤–≤–æ–¥–µ
        if (username) {
            saveUsername(username);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        currentUser = username;

        updateAdminUI();
        recordUserActivity();

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–µ
        set(userStatusOnlineRef, {
            online: true,
            timestamp: serverTimestamp(),
            fingerprint: userFingerprint || 'loading',
            username: username || '–ê–Ω–æ–Ω–∏–º'
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–∞
    usernameInput.addEventListener('blur', () => {
        const username = usernameInput.value.trim();
        if (username) {
            saveUsername(username);
        }
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' && e.ctrlKey) {
            const activeElement = document.activeElement;
            if (activeElement && activeElement.classList.contains('comment-input')) {
                const postId = activeElement.id.replace('comment-text-', '');
                if (postId) {
                    e.preventDefault();
                    submitComment(postId);
                }
            }
        }
    });

    updateAdminUI();
}

// –≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
console.log('‚úÖ DevTalk –≥–æ—Ç–æ–≤! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
setInterval(() => {
    console.log('üîÑ DevTalk —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
setTimeout(() => {
    showSuccessNotification('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ DevTalk! üéâ', 3000);
}, 1000);

// ============ –ú–û–ë–ò–õ–¨–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ============
// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑—É–º –ø—Ä–∏ –¥–≤–æ–π–Ω–æ–º —Ç–∞–ø–µ –Ω–∞ iOS (–ø–æ–ª–µ–∑–Ω–æ –∏ –¥–ª—è Android)
document.addEventListener('touchstart', function(event) {
    if (event.touches.length > 1) {
        event.preventDefault();
    }
}, { passive: false });

// –£–ª—É—á—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É touch —Å–æ–±—ã—Ç–∏–π –¥–ª—è —á–∞—Ç–æ–≤
document.addEventListener('DOMContentLoaded', function() {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
    document.addEventListener('contextmenu', function(e) {
        if (e.target.closest('.chat-item, .message, .chat-avatar')) {
            e.preventDefault();
            return false;
        }
    });

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    const chatMessages = document.querySelector('.chat-messages');
    const chatsList = document.querySelector('.chats-list');

    if (chatMessages) {
        chatMessages.addEventListener('touchstart', function() {}, { passive: true });
    }

    if (chatsList) {
        chatsList.addEventListener('touchstart', function() {}, { passive: true });
    }

    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–∞—Ö –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    function preventTextSelection(element) {
        if (element) {
            element.style.webkitUserSelect = 'none';
            element.style.userSelect = 'none';
            element.style.webkitTouchCallout = 'none';
        }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —á–∞—Ç–∞
    document.addEventListener('click', function(e) {
        if (e.target.closest('.chats-modal')) {
            const chatItems = document.querySelectorAll('.chat-item, .message, .chat-avatar');
            chatItems.forEach(preventTextSelection);
        }
    });
});

// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ Android
window.addEventListener('resize', function() {
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ—Ç—É –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏/—Å–∫—Ä—ã—Ç–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const viewport = window.visualViewport;
    if (viewport) {
        const chatsModal = document.querySelector('.chats-modal');
        if (chatsModal && chatsModal.classList.contains('show')) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            setTimeout(() => {
                const messageInput = document.querySelector('.message-input:focus');
                if (messageInput) {
                    messageInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }, 300);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã realtime
window.addEventListener('online', function() {
    console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    showSuccessNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 2000);

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–≤—è–∑–∏
    if (document.getElementById('chats-modal')?.classList.contains('show')) {
        setTimeout(() => {
            loadUserChats();
            if (currentChatId) {
                loadChatMessages(currentChatId);
            }
        }, 1000);
    }
});

window.addEventListener('offline', function() {
    console.log('üì¥ –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    showWarningNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –†–∞–±–æ—Ç–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ', 3000);
});
